apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"

    // 必须放在前面
    signingConfigs {
        release {// 线上环境
            keyAlias 'releaseandroid'
            keyPassword 'releaseandroid'
            storeFile file('D:\\demo\\GradleConfigDemo\\releaseKeyStore.jks')
            storePassword 'releaseandroid'
        }

        debug {// 开发环境
            keyAlias 'debugandroid'
            keyPassword 'debugandroid'
            storeFile file('D:\\demo\\GradleConfigDemo\\debugKeyStore.jks')
            storePassword 'debugandroid'
        }
    }

    // 注意，如果在AndroidMainfest.xml里面定义了与这里相同的属性，会以这里的为主。
    defaultConfig {
        applicationId "com.example.gradleconfigdemo"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        signingConfig signingConfigs.release
        multiDexEnabled = true
        flavorDimensions "abi","version"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    productFlavors {
        wandoujiaV1 {
            // 关联维度
            dimension 'version'
            // 豌豆荚渠道包配置
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        wandoujiaV2 {
            // 关联维度
            dimension 'version'
            // 豌豆荚渠道包配置
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        xiaomiV1 {
            // 关联维度
            dimension 'version'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            applicationId "com.wiky.gradle.xiaomi" //配置包名

        }
        xiaomiV2 {
            // 关联维度
            dimension 'version'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            applicationId "com.wiky.gradle.xiaomi" //配置包名

        }
        wandoujiaX86 {
            // 关联维度
            dimension 'abi'
            // 豌豆荚渠道包配置
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        wandoujiaArmV7 {
            // 关联维度
            dimension 'abi'
            // 豌豆荚渠道包配置
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "wandoujia"]
        }
        xiaomiX86 {
            // 关联维度
            dimension 'abi'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            applicationId "com.wiky.gradle.xiaomi" //配置包名
        }
        xiaomiArmV7 {
            // 关联维度
            dimension 'abi'
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: "xiaomi"]
            applicationId "com.wiky.gradle.xiaomi" //配置包名
        }
    }

    // ================================ 多渠道统一配置 =======================================
//    productFlavors {
//        wandoujia {}
//        xiaomi {}
//        _360 {}
//        //...
//    }
//
//    productFlavors.all {
//            //批量修改，类似一个循序遍历
//        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
//    }
    // ================================ 多渠道统一配置 =======================================

    /**
     * buildTypes:定义了编译类型，针对每个类型我们可以有不同的编译配置，
     * 不同的编译配置对应的有不同的编译命令。默认的有debug、release 的类型。
     */
    buildTypes {
        release {// 生产环境
            buildConfigField("boolean", "LOG_DEBUG", "false")//配置Log日志
            buildConfigField("String", "URL_PERFIX", "\"https://release.cn/\"")// 配置URL前缀
            minifyEnabled false//是否对代码进行混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//指定混淆的规则文件
            signingConfig signingConfigs.release//设置签名信息
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            applicationIdSuffix '.test'//在applicationId 中添加了一个后缀，一般使用的不多
            versionNameSuffix 'test'//在 versionName 中添加了一个后缀，一般使用的不多
        }
        debug {// 测试环境
            buildConfigField("boolean", "LOG_DEBUG", "true")//配置Log日志
            buildConfigField("String", "URL_PERFIX", "\"https://test.com/\"")// 配置URL前缀
            minifyEnabled false//是否对代码进行混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//指定混淆的规则文件
            signingConfig signingConfigs.debug//设置签名信息
            debuggable false//是否支持断点调试
            jniDebuggable false//是否可以调试NDK代码
            renderscriptDebuggable false//是否开启渲染脚本就是一些c写的渲染方法
            zipAlignEnabled true//是否对APK包执行ZIP对齐优化，减小zip体积，增加运行效率
            pseudoLocalesEnabled false//是否在APK中生成伪语言环境，帮助国际化的东西，一般使用的不多
            applicationIdSuffix '.test' //在applicationId 中添加了一个后缀，一般使用的不多
            versionNameSuffix 'test' //在 versionName 中添加了一个后缀，一般使用的不多
        }
    }

    sourceSets {//目录指向配置
        main {
            jniLibs.srcDirs = ['libs'] //指定lib库目录
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    packagingOptions {
        // pickFirsts做用是 当有重复文件时 打包会报错 这样配置会使用第一个匹配的文件打包进入apk
        // 表示当apk中有重复的META-INF目录下有重复的LICENSE文件时  只用第一个 这样打包就不会报错
        pickFirsts = ['META-INF/LICENSE']

        // merge合并 当出现重复文件时 合并重复的文件 然后打包入apk
        // 这个是有默认值得 merges = [] 这样会把默默认值去掉  所以我们用下面这种方式 在默认值后添加
        // 一般不与pickFirsts同时使用
        merge 'META-INF/LICENSE'

        // 这个是在同时使用butterknife、dagger2做的一个处理。同理，遇到类似的问题，只要根据gradle的提示，做类似处理即可。
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // 程序在编译的时候会检查lint，有任何错误提示会停止build，我们可以关闭这个开关
    lintOptions {
        abortOnError false // 即使报错也不会停止打包
        checkReleaseBuilds false  // 打包release版本的时候进行检测
    }

    // ================================ aaptOptions配置 =======================================
    aaptOptions{
//        // aapt 执行的额外参数
//        //  --rename-manifest-package 更改包名
//        additionalParameters '--rename-manifest-package','com.zinc.test'
//        additionalParameters '-R', 'src/main/res2/', '--auto-add-overlay'
//        additionalParameters '-v'

        // 对 png 进行优化检查
//        cruncherEnabled false

//        failOnMissingConfigEntry true

//        cruncherProcesses 4

        // 忽略掉 png 后缀的图像，只会排除 assets 下的资源，res下的资源不会排除
//        ignoreAssets "*.png"
//        ignoreAssetsPattern '*.png'

        // 是否对资源进行压缩，如果传入''，则表明不会进行压缩，默认不对"jpg"、"png"压缩
        // aapt l -v apk路径 进行查看
//        noCompress ''
        // 不对 bat 进行压缩
//        noCompress '.bat'
    }
    // ================================ aaptOptions配置 =======================================

    // ================================ adbOptions配置 =======================================
    // terminal 输入 adb 可以查看
    adbOptions {
        // apk 安装时候可选参数
        // adb install -d
        installOptions '-d'
        // adb 执行超时时间 毫秒
        timeOutInMs 5 * 1000
    }
    // ================================ adbOptions配置 =======================================

    // ================================ externalNativeBuild配置 =======================================
    externalNativeBuild {

        ndkBuild {
            path 'Android.mk'
            buildStagingDirectory "./outputs/ndk-build"
        }

        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
            buildStagingDirectory "./outputs/cmake"
        }

    }
    // ================================ externalNativeBuild配置 =======================================

    // ================================ dexOptions配置 =======================================
    dexOptions {
        // 可以使用 "dx --help" 进行查看
        // 例如：dex 的 分包 [--multi-dex [--main-dex-list=<file> [--minimal-main-dex]]
        // dex 的 分包需要达到65，而如果设置了--minimal-main-dex ，则会让 proguardFile 设置的文件放进主dex文件
        // 1. multiDexEnabled --> --multi-dex
        // 2. proguardFile --> --main-dex-list=<file>
        additionalParameters '--minimal-main-dex'

        // 设置运行内存
        javaMaxHeapSize '2048m'

        // 大模式
        jumboMode true

        // 是否保存 被运行时注解的类 保存至主dex
        keepRuntimeAnnotatedClasses false

        // 最大进程数 默认为4
        maxProcessCount 4

        // 线程数
        threadCount 4

        // 预编译 dex lib，在我们build的时候会快些，但clean时便会慢，默认开启
        preDexLibraries true
    }
    // ================================ dexOptions配置 =======================================

    // ================================ splits配置 =======================================
    splits {

//        language {
//            enable = true
//            include "es-rMX", "zh", "en"
//        }

//        abi {
//            // 是否开启
//            enable true
//
//            // 排除不必要的架构
////            exclude 'x86','arm64-v8a'
//
//            // 重置包含的目录，因为已经是包含全部
////            reset()
//            // 设置包含，调用前需要先用 reset 将默认清除
////            include 'armeabi-v7a', 'x86'
//
//            // 是否打出包含全部的apk
//            universalApk true
//        }

        // 分辨率
        density {
            // 开启
            enable true

            // 排除分辨率
//            exclude 'hdpi', 'ldpi', 'mdpi', 'xhdpi'

            // 重置默认分辨率列表
//            reset()

            // 包含分辨率
//            include 'hdpi', 'xxhdpi'

            // https://developer.android.com/guide/topics/manifest/compatible-screens-element
            // 会在 manifest 中添加 <compatible-screens><screen ...>
            compatibleScreens 'small', 'normal', 'large', 'xlarge'
        }
    }
    // ================================ splits配置 =======================================

    // ================================ lintOptions配置 =======================================
    // 帮助发现并纠正代码结构质量
    // 使用 lintDebug 运行
    lintOptions {

        // 发现错误，停止构建
        abortOnError true

        // 设置类型的提示级别
        // 可用id 可用 "lint --list" 查找
//        error('UnusedResources')
//        ignore('UnusedResources')

        // 是否输出全路径
//        absolutePaths true

        // 设置只检查的。
        // 可用id 可用 "lint --list" 查找
//        check 'UnusedResources'

        // 是否检查所有警告
//        checkAllWarnings false

        // 在 release 版本是否检查 fatal 的类型
//        checkReleaseBuilds true

        // 关闭或开启某个id
        // 可用id 可用 "lint --list" 查找
//        disable 'UnusedResources'
//        enable ''

        // Returns whether lint should include explanations for issue errors. (Note that HTML and XML reports intentionally do this unconditionally, ignoring this setting.)
        // html 和 xml 的报告会忽略这个
//        explainIssues true

        // lint 配置
        lintConfig file('lint/rule_lint.xml')

        // html 的输出路径
//        htmlOutput file('report/zincHtmlReport.html')

        // 是否需要html报告
//        htmlReport true

        // 是否忽略警告，只检查error
//        ignoreWarnings true

        // 是否错误时，需要包含行数
//        noLines false

        // 是否关闭一些输出信息
//        quiet true

        // 没办法直接操作，由error()...方法操作
//        severityOverrides

        // 是否输出全部信息
//        showAll true

        // 输出
//        textOutput file('report/zincTextReport.txt')
//        textReport true

        // 是否将警告作为错误输出
//        warningsAsErrors true

//        xmlOutput file('report/zincXmlReport.xml')
//        xmlReport true
    }
    // ================================ lintOptions配置 =======================================
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar']) // 本地jar包依赖
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

// 有四个基本的 task, Android 继承他们分别进行了自己的实现：
// assemble：对所有的 buildType 生成 apk 包。
// clean:移除所有的编译输出文件，比如apk
// check:执行lint检测编译。
// build:同时执行assemble和check命令
